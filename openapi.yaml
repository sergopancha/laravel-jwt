openapi: 3.0.3
info:
  title: Описание методов API реализованных с помощью JWT аутентификации
  description: |-
    Тестовое задание: сделать простое API на Laravel с документацией в Swagger.

    Три метода:
      - Авторизация с использованием JWT
      - Получение данных об авторизованном пользователе по токену
      - Выход

    Код проекта загрузить на GitHub и прислать ссылку.

    [Код проекта на Github](https://github.com/sergopancha/laravel-jwt)
  contact:
    email: tulazis@yandex.ru
  version: 1.0.0
externalDocs:
  description: Описание и инструменты Swagger
  url: http://swagger.io
servers:
  - url: http://laravel-jwt.local/api
paths:
  /auth/register:
    post:
      tags:
        - auth
      summary: Create user
      description: new user
      operationId: createUser
      parameters:
        - name: name
          in: query
          description: The user name for login
          required: true
          schema:
            type: string
        - name: email
          in: query
          description: The user email for login
          required: true
          schema:
            type: string
        - name: password
          in: query
          description: The password for login
          required: true
          schema:
            type: string
        - name: password_confirmation
          in: query
          description: The password for login
          required: true
          schema:
            type: string
      requestBody:
        description: Created user object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRequest'
          application/xml:
            schema:
              $ref: '#/components/schemas/UserRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/UserRequest'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserRegister'
            application/xml:
              schema:
                $ref: '#/components/schemas/UserRegister'
  /auth/login:
    post:
      tags:
        - auth
      summary: Logs user with  into the system
      description: ''
      operationId: loginUser
      parameters:
        - name: username
          in: query
          description: The user name for login
          required: false
          schema:
            type: string
        - name: password
          in: query
          description: The password for login in clear text
          required: false
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          headers:
            X-Rate-Limit:
              description: calls per hour allowed by the user
              schema:
                type: integer
                format: int32
            X-Expires-After:
              description: date in UTC when token expires
              schema:
                type: string
                format: date-time
          content:
            application/xml:
              schema:
                type: string
            application/json:
              schema:
                type: string
        '400':
          description: Invalid username/password supplied
  /user/logout:
    get:
      tags:
        - auth
      summary: Logs out current logged in user session
      description: ''
      operationId: logoutUser
      parameters: []
      responses:
        default:
          description: successful operation
  /user/{username}:
    get:
      tags:
        - auth
      summary: Get user by user name
      description: ''
      operationId: getUserByName
      parameters:
        - name: username
          in: path
          description: 'The name that needs to be fetched. Use user1 for testing. '
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Invalid username supplied
        '404':
          description: User not found
    put:
      tags:
        - auth
      summary: Update user
      description: This can only be done by the logged in user.
      operationId: updateUser
      parameters:
        - name: username
          in: path
          description: name that need to be deleted
          required: true
          schema:
            type: string
      requestBody:
        description: Update an existent user in the store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
          application/xml:
            schema:
              $ref: '#/components/schemas/User'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        default:
          description: successful operation
components:
  schemas:
    User:
      type: object
      properties:
        message:
          type: string
          format: int64
          example: 10
        username:
          type: string
          example: theUser
        firstName:
          type: string
          example: John
        lastName:
          type: string
          example: James
        email:
          type: string
          example: john@email.com
        password:
          type: string
          example: '12345'
        phone:
          type: string
          example: '12345'
        userStatus:
          type: integer
          description: User Status
          format: int32
          example: 1
      xml:
        name: user
    UserRequest:
      type: object
      properties:
        name:
          type: string
          example: FirstName LastName
        email:
          type: string
          example: john@email.com
        password:
          type: string
          example: '12345'
        password_confirmation:
          type: string
          example: '12345'
      xml:
        name: userRequest
    UserRegister:
      type: object
      properties:
        message:
          type: string
          example: User successfully registered
        user:
          type: object
          properties:
            name:
              type: string
              example: FirstName LastName
            email:
              type: string
              example: john@email.com
            updated_at:
              type: string
              example: 2024-03-10T11:48:05.000000Z
            created_at:
              type: string
              example: 2024-03-10T11:48:05.000000Z
            id:
              type: integer
              example: 2


      xml:
        name: userRequest
    ApiResponse:
      type: object
      properties:
        code:
          type: integer
          format: int32
        type:
          type: string
        message:
          type: string
      xml:
        name: '##default'
  securitySchemes:
    petstore_auth:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: https://petstore3.swagger.io/oauth/authorize
          scopes:
            write:pets: modify pets in your account
            read:pets: read your pets
    api_key:
      type: apiKey
      name: api_key
      in: header
